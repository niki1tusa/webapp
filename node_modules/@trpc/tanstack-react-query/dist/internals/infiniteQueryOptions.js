'use strict';

var reactQuery = require('@tanstack/react-query');
var utils = require('./utils.js');

function trpcInfiniteQueryOptions(args) {
    const { input, query, path, queryKey, opts } = args;
    const inputIsSkipToken = input === reactQuery.skipToken;
    const queryFn = async (queryFnContext)=>{
        const actualOpts = {
            ...opts,
            trpc: {
                ...opts?.trpc,
                ...opts?.trpc?.abortOnUnmount ? {
                    signal: queryFnContext.signal
                } : {
                    signal: null
                }
            }
        };
        const result = await query(...utils.getClientArgs(queryKey, actualOpts, {
            direction: queryFnContext.direction,
            pageParam: queryFnContext.pageParam
        }));
        return result;
    };
    return Object.assign(reactQuery.infiniteQueryOptions({
        ...opts,
        queryKey,
        queryFn: inputIsSkipToken ? reactQuery.skipToken : queryFn,
        initialPageParam: opts?.initialCursor ?? input?.cursor
    }), {
        trpc: utils.createTRPCOptionsResult({
            path
        })
    });
}

exports.trpcInfiniteQueryOptions = trpcInfiniteQueryOptions;
