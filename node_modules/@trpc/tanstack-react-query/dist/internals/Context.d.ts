import type { QueryClient } from '@tanstack/react-query';
import type { TRPCClient } from '@trpc/client';
import type { AnyTRPCRouter } from '@trpc/server';
import * as React from 'react';
import type { TRPCOptionsProxy } from './createOptionsProxy';
export interface CreateTRPCContextResult<TRouter extends AnyTRPCRouter> {
    TRPCProvider: React.FC<{
        children: React.ReactNode;
        queryClient: QueryClient;
        trpcClient: TRPCClient<TRouter>;
    }>;
    useTRPC: () => TRPCOptionsProxy<TRouter>;
    useTRPCClient: () => TRPCClient<TRouter>;
}
/**
 * Create a set of type-safe provider-consumers
 *
 * @see https://trpc.io/docs/client/tanstack-react-query/setup#3a-setup-the-trpc-context-provider
 */
export declare function createTRPCContext<TRouter extends AnyTRPCRouter>(): CreateTRPCContextResult<TRouter>;
//# sourceMappingURL=Context.d.ts.map