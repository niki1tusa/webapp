'use strict';

var React = require('react');
var createOptionsProxy = require('./createOptionsProxy.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

/**
 * Create a set of type-safe provider-consumers
 *
 * @see https://trpc.io/docs/client/tanstack-react-query/setup#3a-setup-the-trpc-context-provider
 */ function createTRPCContext() {
    const TRPCClientContext = /*#__PURE__*/ React__namespace.createContext(null);
    const TRPCContext = /*#__PURE__*/ React__namespace.createContext(null);
    function TRPCProvider(props) {
        const value = React__namespace.useMemo(()=>createOptionsProxy.createTRPCOptionsProxy({
                client: props.trpcClient,
                queryClient: props.queryClient
            }), [
            props.trpcClient,
            props.queryClient
        ]);
        return /*#__PURE__*/ React__namespace.createElement(TRPCClientContext.Provider, {
            value: props.trpcClient
        }, /*#__PURE__*/ React__namespace.createElement(TRPCContext.Provider, {
            value: value
        }, props.children));
    }
    function useTRPC() {
        const utils = React__namespace.useContext(TRPCContext);
        if (!utils) {
            throw new Error('useTRPC() can only be used inside of a <TRPCProvider>');
        }
        return utils;
    }
    function useTRPCClient() {
        const client = React__namespace.useContext(TRPCClientContext);
        if (!client) {
            throw new Error('useTRPCClient() can only be used inside of a <TRPCProvider>');
        }
        return client;
    }
    return {
        TRPCProvider,
        useTRPC,
        useTRPCClient
    };
}

exports.createTRPCContext = createTRPCContext;
