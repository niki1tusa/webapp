'use strict';

var reactQuery = require('@tanstack/react-query');
var React = require('react');
var utils = require('./utils.js');

function _interopNamespaceDefault(e) {
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

/**
 * @internal
 */ const trpcSubscriptionOptions = (args)=>{
    const { subscribe, path, queryKey, opts = {} } = args;
    const input = queryKey[1]?.input;
    const enabled = 'enabled' in opts ? !!opts.enabled : input !== reactQuery.skipToken;
    const _subscribe = (innerOpts)=>{
        return subscribe(path.join('.'), input ?? undefined, innerOpts);
    };
    return {
        ...opts,
        enabled,
        subscribe: _subscribe,
        queryKey,
        trpc: utils.createTRPCOptionsResult({
            path
        })
    };
};
function useSubscription(opts) {
    const optsRef = React__namespace.useRef(opts);
    optsRef.current = opts;
    const trackedProps = React__namespace.useRef(new Set([]));
    const addTrackedProp = React__namespace.useCallback((key)=>{
        trackedProps.current.add(key);
    }, []);
    const currentSubscriptionRef = React__namespace.useRef(()=>{
    // noop
    });
    const reset = React__namespace.useCallback(()=>{
        // unsubscribe from the previous subscription
        currentSubscriptionRef.current?.();
        updateState(getInitialState);
        if (!opts.enabled) {
            return;
        }
        const subscription = opts.subscribe({
            onStarted: ()=>{
                optsRef.current.onStarted?.();
                updateState((prev)=>({
                        ...prev,
                        status: 'pending',
                        error: null
                    }));
            },
            onData: (data)=>{
                optsRef.current.onData?.(data);
                updateState((prev)=>({
                        ...prev,
                        status: 'pending',
                        data,
                        error: null
                    }));
            },
            onError: (error)=>{
                optsRef.current.onError?.(error);
                updateState((prev)=>({
                        ...prev,
                        status: 'error',
                        error
                    }));
            },
            onConnectionStateChange: (result)=>{
                updateState((prev)=>{
                    switch(result.state){
                        case 'connecting':
                            return {
                                ...prev,
                                status: 'connecting',
                                error: result.error
                            };
                        case 'pending':
                            // handled in onStarted
                            return prev;
                        case 'idle':
                            return {
                                ...prev,
                                status: 'idle',
                                data: undefined,
                                error: null
                            };
                    }
                });
            }
        });
        currentSubscriptionRef.current = ()=>{
            subscription.unsubscribe();
        };
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [
        reactQuery.hashKey(opts.queryKey),
        opts.enabled
    ]);
    const getInitialState = React__namespace.useCallback(()=>{
        return opts.enabled ? {
            data: undefined,
            error: null,
            status: 'connecting',
            reset
        } : {
            data: undefined,
            error: null,
            status: 'idle',
            reset
        };
    }, [
        opts.enabled,
        reset
    ]);
    const resultRef = React__namespace.useRef(getInitialState());
    const [state, setState] = React__namespace.useState(trackResult(resultRef.current, addTrackedProp));
    state.reset = reset;
    const updateState = React__namespace.useCallback((callback)=>{
        const prev = resultRef.current;
        const next = resultRef.current = callback(prev);
        let shouldUpdate = false;
        for (const key of trackedProps.current){
            if (prev[key] !== next[key]) {
                shouldUpdate = true;
                break;
            }
        }
        if (shouldUpdate) {
            setState(trackResult(next, addTrackedProp));
        }
    }, [
        addTrackedProp
    ]);
    React__namespace.useEffect(()=>{
        if (!opts.enabled) {
            return;
        }
        reset();
        return ()=>{
            currentSubscriptionRef.current?.();
        };
    }, [
        reset,
        opts.enabled
    ]);
    return state;
}
function trackResult(result, onTrackResult) {
    const trackedResult = new Proxy(result, {
        get (target, prop) {
            onTrackResult(prop);
            return target[prop];
        }
    });
    return trackedResult;
}

exports.trpcSubscriptionOptions = trpcSubscriptionOptions;
exports.useSubscription = useSubscription;
