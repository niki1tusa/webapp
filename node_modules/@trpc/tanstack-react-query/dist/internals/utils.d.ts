import { type QueryClient } from '@tanstack/react-query';
import type { QueryType, TRPCMutationKey, TRPCQueryKey, TRPCQueryOptionsResult } from './types';
/**
 * @internal
 */
export declare function createTRPCOptionsResult(value: {
    path: readonly string[];
}): TRPCQueryOptionsResult['trpc'];
/**
 * @internal
 */
export declare function getClientArgs<TOptions>(queryKey: TRPCQueryKey, opts: TOptions, infiniteParams?: {
    pageParam: any;
    direction: 'forward' | 'backward';
}): readonly [string, unknown, any];
/**
 * @internal
 */
export declare function buildQueryFromAsyncIterable(asyncIterable: AsyncIterable<unknown>, queryClient: QueryClient, queryKey: TRPCQueryKey): Promise<unknown[]>;
/**
 * To allow easy interactions with groups of related queries, such as
 * invalidating all queries of a router, we use an array as the path when
 * storing in tanstack query.
 *
 * @internal
 */
export declare function getQueryKeyInternal(path: readonly string[], input?: unknown, type?: QueryType): TRPCQueryKey;
/**
 * @internal
 */
export declare function getMutationKeyInternal(path: readonly string[]): TRPCMutationKey;
/**
 * @internal
 */
export declare function unwrapLazyArg<T>(valueOrLazy: T | (() => T)): T;
//# sourceMappingURL=utils.d.ts.map