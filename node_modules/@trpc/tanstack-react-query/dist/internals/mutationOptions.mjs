import { unwrapLazyArg, getMutationKeyInternal, createTRPCOptionsResult, getClientArgs } from './utils.mjs';

/**
 * @internal
 */ function trpcMutationOptions(args) {
    const { mutate, path, opts, overrides } = args;
    const queryClient = unwrapLazyArg(args.queryClient);
    const mutationKey = getMutationKeyInternal(path);
    const defaultOpts = queryClient.defaultMutationOptions(queryClient.getMutationDefaults(mutationKey));
    const mutationSuccessOverride = overrides?.onSuccess ?? ((options)=>options.originalFn());
    const mutationFn = async (input)=>{
        const result = await mutate(...getClientArgs([
            path,
            {
                input
            }
        ], opts));
        return result;
    };
    return {
        ...opts,
        mutationKey: mutationKey,
        mutationFn,
        onSuccess (...args) {
            const originalFn = ()=>opts?.onSuccess?.(...args) ?? defaultOpts?.onSuccess?.(...args);
            return mutationSuccessOverride({
                originalFn,
                queryClient,
                meta: opts?.meta ?? defaultOpts?.meta ?? {}
            });
        },
        trpc: createTRPCOptionsResult({
            path
        })
    };
}

export { trpcMutationOptions };
